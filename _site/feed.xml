<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description>Um tanto quanto curioso</description>
    <link>http://localhost:4000//</link>
    <atom:link href="http://localhost:4000//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 30 Apr 2020 14:58:45 -0300</pubDate>
    <lastBuildDate>Thu, 30 Apr 2020 14:58:45 -0300</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>Trabalhando com Argumentos em Node.js</title>
        <description>&lt;p&gt;Você já fez aquele programa que executa uma tarefa especifica e que funciona perfeitamente, dai de repente surge a necessidade de que esse programa receba um parâmetro ao iniciar.&lt;/p&gt;

&lt;p&gt;Vamos supor que ele precise receber um CNPJ no inicio do programa, por algum motivo do destino, talvez pra buscar os dados em alguma API. O que importa agora pra gente é entender como usar os argumentos.&lt;/p&gt;

&lt;p&gt;Naturalmente o Node.js já nos permite acessar argumentos no inicio do programa, então vamos supor que eu deseje passar dois parâmetros, sendo eles &lt;strong&gt;cnpj&lt;/strong&gt; e &lt;strong&gt;isActive&lt;/strong&gt;, eu faria dessa forma:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ node index 123 true&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;E lá no código, eu precisaria acessar esses parâmetros da seguinte maneira:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const cnpj = process.argv[2]
const isActive = Boolean(process.argv[3])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Funciona&lt;/strong&gt;? Sim, funciona. Mas você percebe que tanto a forma de passar esses argumentos quanto a de recebe-los ficou estranha? Talvez não agora, mas no futuro sua equipe ou até outra equipe de trabalho saberão o que significa cada argumento desse ou terão que ficar lendo o código pra identificar?&lt;/p&gt;

&lt;p&gt;Pois é, eu passei por isso a um tempo atrás, e por isso fiz a lib &lt;strong&gt;@pedroentringer/parser-command-line&lt;/strong&gt; que simplifica muito este processo.&lt;/p&gt;

&lt;p&gt;Então vamos instalar esse trem:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ yarn add @pedroentringer/parser-command-line&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sensacional, feito isso nós já podemos passar e receber argumento de uma forma muito mais simples.
Usando o mesmo exemplo ficaria dessa forma:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ node index --cnpj=123 -isActive&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Já melhorou né? Agora veja como faremos pra acessar isso no código:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const parser = require('@pedroentringer/parser-command-line')
const args = parser.parseArgs();

console.log(args)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Muito mais simples né? Agora veja como será o resultado disso:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;{
  bin: &quot;node&quot;,
  commands: [&quot;index&quot;],
  flags: {
    cnpj: 123,
    isActive: true
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dessa forma fica muito melhor pra gente usar estes dados não é mesmo? E melhor ainda, você pode usar essa lib na web também, dessa forma é possível fazer o parse de um comando vindo de uma string também. Pense que ela veio via websocket do backend, ou qualquer outro cenário hehehe.&lt;/p&gt;

&lt;p&gt;Usariamos dessa forma:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const parser = require('@pedroentringer/parser-command-line')
const args = parser.parseString('meuPrograma show --message=&quot;Que legal, isso é uma mensagem&quot; --time=100 -isSuccess');

console.log(args)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;e o resultado desse parse será:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;{
  bin: &quot;meuPrograma&quot;,
  commands: [&quot;show&quot;],
  flags: {
    message: &quot;Que legal, isso é uma mensagem&quot;,
    time: 100,
    isSuccess: true
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Super bacana né? E você pode aplicar isso para diversas outras funcionalidades. Aqui não existem limites. hehehe&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Divirta-se!&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 30 Apr 2020 10:00:00 -0300</pubDate>
        <link>http://localhost:4000//nodejs/trabalhando-com-argumentos-em-nodejs/</link>
        <guid isPermaLink="true">http://localhost:4000//nodejs/trabalhando-com-argumentos-em-nodejs/</guid>
        
        
        <category>Nodejs</category>
        
      </item>
    
      <item>
        <title>Manipulando dados de um site com Web Scraping</title>
        <description>&lt;p&gt;É impressionante a ideia de conseguir manipular os dados de um site de outra pessoa não é mesmo? Eu adoro isso, logo quando comecei a faculdade de programação fiquei intrigado por não ser a primeira coisa a aprender (que sonho).&lt;/p&gt;

&lt;p&gt;Mas vamos direto ao ponto, aqui vamos aplicar o Web Scraping em um site simples e em outro um pouco mais complexo. &lt;strong&gt;Let`s go to code&lt;/strong&gt;.&lt;/p&gt;

&lt;h4 id=&quot;bibliotecas-utilizadas&quot;&gt;Bibliotecas utilizadas:&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Cheerio&lt;/li&gt;
  &lt;li&gt;@pedroentringer/cheerio-table-parser &lt;strong&gt;(Mágica kkk)&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Axios&lt;/li&gt;
  &lt;li&gt;Puppeteer&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;manipulando-dados-de-um-sitesimples&quot;&gt;Manipulando dados de um site simples&lt;/h4&gt;
&lt;p&gt;Pra começar vamos criar nosso projeto bem rapidinho&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ yarn init -y
$ yarn add cheerio axios puppeteer @pedroentringer/cheerio-table-parser
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Este processo pode demorar alguns minutinhos para terminar, enquanto isso vamos falar um pouco sobre cada uma dessas dependências.&lt;/p&gt;

&lt;h5 id=&quot;axios&quot;&gt;Axios&lt;/h5&gt;
&lt;p&gt;O Axios é muuuito usado para fazer requisições HTTP, quando você quer buscar ou enviar dados para algum site.
Por aqui vamos usar ele para buscar a estrutura do meu proprio blog hehehe&lt;/p&gt;

&lt;h5 id=&quot;cheerio&quot;&gt;Cheerio&lt;/h5&gt;
&lt;p&gt;O Cheerio é uma lib que nos permite manipular a DOM do site com mais facilidade, muito similar com a forma do JQuery.&lt;/p&gt;

&lt;h5 id=&quot;pedroentringercheerio-table-parser&quot;&gt;@pedroentringer/cheerio-table-parser&lt;/h5&gt;
&lt;p&gt;Essa é uma lib que eu mesmo fiz pra resolver uma problema que eu tive recentemente. Ela basicamente recebe qualquer tabela em HTML e converte para JSON, assim fica mais fácil de manipular os dados né? hehehe&lt;/p&gt;

&lt;h5 id=&quot;puppeteer&quot;&gt;Puppeteer&lt;/h5&gt;
&lt;p&gt;O Puppeteer é incrivel, com ele você consegue mapear ações para que um “bot” replique no site usando um navegador, como se fosse uma pessoa de verdade, &lt;strong&gt;top né?&lt;/strong&gt;&lt;/p&gt;

&lt;h5 id=&quot;lets-go-to-code&quot;&gt;Let’s go to code&lt;/h5&gt;
&lt;p&gt;Depois que tudo tiver instalado certinho, bora começar de uma forma simples.
O desafio vai ser buscar o titulo do primeiro post desse nosso blog aqui.&lt;/p&gt;

&lt;p&gt;Pra fazer isso vamos criar nosso primeiro arquivo &lt;strong&gt;index.js&lt;/strong&gt; e já importar o &lt;em&gt;axios&lt;/em&gt; e o &lt;em&gt;cheerio&lt;/em&gt; nele&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const axios = require('axios')
const cheerio = require('cheerio')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Show, feito isso já podemos usar o axios para fazer uma busca na home do nosso blog, e vamos fazer isso da seguinte forma:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const webscraping = async () =&amp;gt; {

  //Busco os dados no site, e aqui vou receber todo o HTML dele
  const { data } = await axios.get('https://pedroentringer.dev')

  //Importo isso para o cheerio
  const $ = cheerio.load(data)

  //Busco todos os elementos de link &quot;a&quot; que sejam filho de elementos que possuem a classe &quot;post-title&quot; 
  const posts = $('.post-title a')

  //Pego apenas o primeiro elemento
  const firstPost = posts.first()

  //E taraaaam, exibo o texto que tem nesse elemento
  console.log(firstPost.text())

}
webscraping()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;E o resultado disso será:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Manipulando dados de um site com Web Scraping
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Simples né? Agora vamos complicar um pouco mais.&lt;/p&gt;

&lt;h4 id=&quot;manipulando-dados-de-um-sitecom-autenticação-e-navegação&quot;&gt;Manipulando dados de um site com autenticação e navegação&lt;/h4&gt;
&lt;p&gt;Agora imagine um cenário que você precise fazer um projeto freelancer pra uma empresa que possui um ecommerce em Magento 1.9, eles precisam visualizar facilmente os 5 pedidos mais populares do site.&lt;/p&gt;

&lt;p&gt;Nesse caso, a cada pagina do painel é gerado um token diferente, e seria bem chato ficar adivinhando como ele gera esse token para que possamos reproduzir da mesma forma, né? Maaas, para resolver isso nós podemos acessar esses dados usando um navegador, e é ai que entra o puppeteer.&lt;/p&gt;

&lt;p&gt;Vamos lá, importaremos todas as libs:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import cheerio from 'cheerio'
import parseTable from '@pedroentringer/cheerio-table-parser'
import puppeteer from 'puppeteer'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Repare que substituimos o axios pelo puppeteer.
E agora é só abrir o navegador, acessar o site, e &lt;strong&gt;daaaale&lt;/strong&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;//Com o puppeteer eu chamo um navegador
const browser = await puppeteer.launch({
  headless: true //Aqui eu defino se quero que ele apareça ou não =&amp;gt; true (não aparece) | false (aparece)
})

try {

  //Crio uma nova aba no navegador
  const page = await browser.newPage()

  //Acesso a pagina de login do painel
  await page.goto('meu_site/admin')

  //Insiro meu email no input de login
  await page.type('input[id=username]', 'oi@pedroentringer.dev')

  //Insiro minha senha no input do login
  await page.type('input[id=login]', 'minha_senha')

  //Clico no botão de Entrar
  await page.click('input[type=submit]')

  /**
   *  Agora eu preciso aguardar o site carregar
   *  e o elemento com id #grid_tab_reviewed_products aparecer na tela
   *  
   *  No painel do Magento 1.9 esse elemento representa um botão que 
   *  irá carregar na tela uma tabela com os 5 produtos mais visitados no site
   *  
   *  Assim que ele aparecer eu clico nele
   */
  await page.waitForSelector('#grid_tab_reviewed_products', { visible: true, timeout: 0 })
  await page.click('#grid_tab_reviewed_products')

  /**
   * Apos o clique, preciso esperar nossa tabela aparecer, pois o Magento irá fazer um request e buscar esses dados
   */
  await page.waitForSelector('#productsReviewedGrid_table', { visible: true, timeout: 0 })

  /**
   * Perfeito, agora que chegamos aqui, é como se estivessemos naquele exemplo simples
   * Basta pegar o html da pagina e manipular com o cheerio
   */
  const html = await page.content()

  //Lembre-se sempre de fechar o navegador kkk
  await browser.close()

  //Importo o HTML do site atual para o cheerio
  const $ = cheerio.load(html)
  
  //Ativo o modulo de converter a tabela
  parseTable($)

  //converto a tabela para JSON
  const table = $('#productsReviewedGrid_table').parseTable()

  console.log(table)

} catch (err) {
  await browser.close()
  console.error(err)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;O mais legal é o resultado super fácil de manipular, veja:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;[
  {
    nome: 'Camiseta Infantil Ac/Dc Preta',
    preco: 'R$ 42,90',
    visitas: 185
  },
  {
    nome: 'Body Beatles Yellow Submarine Manga Curta Branco',
    preco: 'R$ 39,90',
    visitas: 178
  },
  {
    nome: 'Body Iron Maiden Manga Curta Preto Algodão',
    preco: 'R$ 39,90',
    visitas: 170
  },
  {
    nome: 'Body Manga Curta Chega De Nana Neném Preto',
    preco: 'R$ 39,90',
    visitas: 144
  },
  {
    nome: 'Body Ac/Dc Manga Curta Preto',
    preco: 'R$ 39,90',
    visitas: 141
  }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Super bacana né? E você pode aplicar isso para diversas outras funcionalidades. Aqui não existem limites. hehehe&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Divirta-se!&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 29 Apr 2020 15:30:00 -0300</pubDate>
        <link>http://localhost:4000//nodejs/manipulando-dados-de-um-site-com-web-scraping/</link>
        <guid isPermaLink="true">http://localhost:4000//nodejs/manipulando-dados-de-um-site-com-web-scraping/</guid>
        
        
        <category>Nodejs</category>
        
      </item>
    
  </channel>
</rss>
